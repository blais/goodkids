#!/usr/bin/env python3
"""Download latest Tastyworks package and install it, moving the old one aside.

Under Linux, the platform is more stable if you reinstall from scratch.
Do this regularly with this script (e.g. every day?).
"""
__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

import logging
import subprocess
import os
import time
import datetime
from urllib.request import urlretrieve
from os import path

import click
from selenium import webdriver
from selenium.webdriver.chrome import options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


ARCHIVE_DIR = '/opt/archive/tastyworks'


def get_deb_url(headless: bool) -> str:
    """Obtain the URL to the latest version."""

    # Create driver.
    opts = options.Options()
    opts.headless = headless
    driver = webdriver.Chrome(executable_path="chromedriver", options=opts)

    # Open technology page and click on download link.
    driver.get('https://tastyworks.com/technology')
    element = driver.find_element(By.XPATH, '//button[text()="Download Tastyworks Now"]')
    element.click()

    # Wait for overlay; find URL of latest version.
    element = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.LINK_TEXT, 'Linux 64-bit deb')))
    deb_file_url = element.get_attribute('href')
    driver.close()

    return deb_file_url


def download(url: str) -> str:
    """Retrieve the URL to a local file."""
    if not path.exists(ARCHIVE_DIR):
        os.makedirs(ARCHIVE_DIR)
    local_filename = path.join(ARCHIVE_DIR,
                               "{}.{}".format(path.basename(url), datetime.date.today()))
    last_reported = [0]
    def report_progress(block_num, block_size, total_size):
        downloaded_bytes = block_num * block_size
        if downloaded_bytes - last_reported[0] > 0.05 * total_size:
            last_reported[0] = downloaded_bytes
            percent = downloaded_bytes / total_size
            logging.info(f"{downloaded_bytes} bytes retrieved ({percent:.0%})")
    urlretrieve(url, local_filename, report_progress)
    logging.info(f"Done.")
    return local_filename


def install(filename: str):
    """Install a local .deb package, safegarding the prior version aside."""

    # Move prior installation to temp dir.
    if path.exists('/opt/tastyworks'):
        timestamp = int(time.time())
        os.rename('/opt/tastyworks', f'/opt/tastyworks.saved_{timestamp}')

    # Install package.
    subprocess.check_call(['sudo', 'dpkg', '-i', filename], shell=False)


@click.command()
@click.option('--headless/--no-headless', default=True)
def main(headless: bool):
    logging.basicConfig(level=logging.INFO, format='%(levelname)-8s: %(message)s')
    subprocess.check_call(['sudo', '/usr/bin/ls', '-l', ARCHIVE_DIR], shell=False)
    deb_file_url = get_deb_url(headless)
    logging.info(f"Downloading {deb_file_url}")
    filename = download(deb_file_url)
    logging.info(f"Installing file {filename}")
    install(filename)


if __name__ == '__main__':
    main()
